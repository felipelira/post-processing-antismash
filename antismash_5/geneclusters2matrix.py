#!/usr/bin/env python

"
Previously, you must have to run get_geneclusters.py [https://github.com/felipelira/post-processing-antismash/blob/master/antismash_5/get_geneclusters.py]

After, you run geneclusters2matrix.py into the directory which contains the output folder containing all the results from Antismash 5.
It will extract the information from all 'geneclusters.txt' files and generate a matrix with the count of clusters for each genome.

For example:

  Directory
      |_ Output_folder_1 (generated by antismash)
      |_ Output_folder_2 (generated by antismash)
      |_ Output_folder_3 (generated by antismash)

Usage:
      python geneclusters2matrix.py [Directory]
      
Result
	LAP	NAGGN	NRPS	NRPS-like	T1PKS	T3PKS	arylpolyene	bacteriocin	betalactone	butyrolactone	furan	hserlactone	phenazine	phosphonate	siderophore	terpene	transAT-PKS	transAT-PKS-like
GCF_000009125.1	0	0	3	0	1	0	2	1	0	0	1	2	0	0	1	1	0	0
GCF_000020205.1	0	0	0	0	1	0	2	1	2	0	0	0	0	0	1	1	0	0
(...)
GCF_000165085.1	0	0	0	0	1	0	1	1	1	0	0	0	0	0	1	1	0	0
GCF_000167955.1	0	0	6	1	0	0	1	2	0	0	1	1	0	0	1	1	0	0
GCF_000212635.3	0	0	2	1	2	0	1	2	0	0	1	0	0	0	2	1	0	0
"

import csv
import os
import sys
import pandas as pd
from collections import Counter
from Bio import SeqIO
from collections import Counter

dict_results = {}
dict_clusters = {}
directory = sys.argv[1]

for folder in os.listdir(directory):

  if os.path.isdir(folder):

    path = os.path.join(folder,"geneclusters.txt")

    if folder not in dict_results:
  
      dict_results[folder] = path


for genome, realpath in sorted( dict_results.iteritems() ):

	accession = genome.replace('.gbff', '')

	path = os.path.join(realpath) # path to the folder with results from antismash

	if os.path.isfile(path):

		#print path

		for line in open( path, 'r'):

			cluster_name = line.strip().split('\t')[3]

			#print cluster_name

			if accession not in dict_clusters:

				dict_clusters[accession] = [cluster_name]

			else:
				dict_clusters[accession].append(cluster_name)

df = pd.DataFrame({k:Counter(v) for k, v in dict_clusters.items()}).T.fillna(0).astype(int)

df.to_csv("out_table", sep='\t',quoting=csv.QUOTE_NONE )
