#!/usr/bin/env python
"""
by Felipe Lira 2018
Extract information from results generated by 'run_antismash.py'

1 - Extract dna and protein sequences from clusters identified (cluster.aa.faa; cluster.nt.fna)

2 - Gerenate a consensus table with compiled data about clusters and genomes

usage: extract_clusters_antismash.py [input_directory] [output directory]

input_directory = folder containing outputs from antismash
output_directory = folder created to save the outputs of this script

"""
import csv
import os
import sys
import pandas as pd
from collections import Counter
from Bio import SeqIO
from collections import Counter

#TODO run_antismash
# using genbank files
#"run_antismash.py", "-c", "8", "--taxon", "bacteria", "--input-type", "nucl", "--clusterblast", "--full-hmmer", "--outputfolder", "GCF_000367605.1.gbff.antismash", "--disable-html", "--logfile", log


# folder = os.path.realpath('/media/flira/77dd272b-2085-4be2-a3cf-eba95408fcfb/EmerSys_2018/PREDIPATH_genomes_12Marzo2018/Erwinia_06_jul_2018/Erwinia_20180706/genomic.gbff/GCF_000026185.1.gbff.antismash') # directory containing .gbff files

# input directory with antismash results 
directory = sys.argv[1]

out_dir_fna = os.path.join('..', directory + '_fna')

out_dir_faa = os.path.join('..', directory + '_faa')

out_table = directory.strip().split('/')[-1] + ".clusters.tab"

# create folder to store results from antismash
try:
	os.mkdir(out_dir_fna)
except:
	pass


try:
	os.mkdir(out_dir_faa)
except:
	pass


# lists, dictionaries, sets
lst_rslt = []
dict_rslt = {}

dict_clusters = {}


# access directory containing antismash folders
if os.path.isdir(directory):
	os.chdir(directory)
	for f in os.listdir('.'):
		if os.path.isdir(f) and f.endswith('.antismash'):
			path = os.path.realpath(f)
			genome = '.'.join(f.strip().split('/')[-1].split('.')[0:2])
			dict_rslt[genome] = path
			lst_rslt.append(path)

for genome, value in sorted(dict_rslt.iteritems()):

	path = os.path.join(value)

	fasta_fna = open(os.path.join(out_dir_fna, (genome +'_cluster.fna')), 'w')

	fasta_faa = open(os.path.join(out_dir_faa, (genome +'_cluster.faa')), 'w')



	for f in os.listdir(path):

		cluster = "c" + f.split('.c')[-1].replace('.gbk', '')

		if os.path.isfile(os.path.join(path,f)) and 'geneclusters.txt' in f:
			inhandle = os.path.join(path,f)
			for line in open(inhandle, 'r'):
				cluster_name = line.strip().split('\t')[2]
				if genome not in dict_clusters:
					dict_clusters[genome] = [cluster_name]
				else:
					dict_clusters[genome].append(cluster_name)


		elif os.path.isfile(os.path.join(path,f)) and '.cluster' in f:
			inhandle = os.path.join(path,f)

			for seq_record in SeqIO.parse(inhandle, 'genbank'):

				for seq_feature in seq_record.features:

					if seq_feature.type=="cluster":

						try:

							cluster_type = seq_feature.qualifiers['product'][0]
							#print source
						except (KeyError, IndexError):

							source = 'NA'
						

						fasta_fna.write(">%s|%s|%s\n%s\n" % (seq_record.id, cluster, cluster_type,  seq_record.seq))

			for seq_feature in seq_record.features:

				if seq_feature.type=="source":

					try:
						source = seq_feature.qualifiers['organism'][0]
						#print source
					except (KeyError, IndexError):
						source = 'NA'
					try: 
						strain = seq_feature.qualifiers['strain'][0].replace( ' ', '').replace('/', '')
					except (KeyError, IndexError):
						strain = 'NA'

				elif seq_feature.type=="CDS":

					try:
						product = seq_feature.qualifiers['product'][0]
					except (KeyError, IndexError):
						pass
					try:
						refseq = seq_feature.qualifiers['protein_id'][0]
					except (KeyError, IndexError):
						refseq = seq_feature.qualifiers['locus_tag'][0] # = pass
					try:
						translation = seq_feature.qualifiers['translation'][0]
						fasta_faa.write(">ID:%s|[%s]|%s|%s(%s)\n%s\n" % (refseq, product, len(str(translation)), seq_record.id, len(str(seq_record.seq)),  translation))
					except (KeyError, IndexError):
						pass



df = pd.DataFrame({k:Counter(v) for k, v in dict_clusters.items()}).T.fillna(0).astype(int)

df.to_csv(os.path.join('..',out_table), sep='\t',quoting=csv.QUOTE_NONE )

#print df

"""

input_dir = "/".join(directory.strip().split('/')[0:-1])

# fasta file to store amino acids sequences from each genome
output_amino = open( os.path.join( os.path.join('..', out_dir_faa), directory.strip().split('/')[-1] + ".clusters.aa.faa"), "w")

# fasta file to store nucleotide sequences from each genome
#output_dna = open( os.path.join(out_folder, directory.strip().split('/')[-1] + ".clusters.nt.fna"), "w")

#output gbk
#output_gbk = open( os.path.join(out_folder, directory.strip().split('/')[-1] + ".clusters.gbk"), "w")

# output in tabular format to compilie the information about genomes and belonging clusters
out_tab = open( os.path.join('..', directory.strip().split('/')[-1] + ".clusters.tab"), "w")

# dictionary to store information about genomes and clusters detected
dict_clusters = {}

list_directory = []
list_clusters = []

set_clusters = set()

# extract names of clusters of secondary metabolism compounds from antismash results
for l in list_directory:

	if os.path.isdir(os.path.join(l)) and l.endswith('.antismash'):

		genome = '.'.join(l.split('/')[-1].split('.')[0:2] ) 
		
		path = os.path.join(l)

		for f in os.listdir(os.path.join(path)):
			
			if os.path.isfile(os.path.join(path,f)) and 'geneclusters.txt' in f:

				for line in open(os.path.join(path,f), 'r'):

					cluster_name = line.strip().split('\t')[2]

					set_clusters.add(cluster_name)

					if genome not in dict_clusters:
						dict_clusters[genome] = [cluster_name]

					else:
						dict_clusters[genome].append(cluster_name)

			elif os.path.isfile(os.path.join(path,f)) and '.cluster' in f:

				output_dna = os.path.join('.', directory.strip().split('/')[-1] + ".fna")

				#print output_dna #  os.path.join('.' , directory.strip().split('/')[-1]) + '_dna'
				#print directory.strip().split('/')[-1] #  genome, os.path.join(path,f)


# Print dictionary as table
df = pd.DataFrame({k:Counter(v) for k, v in dict_clusters.items()}).T.fillna(0).astype(int)

df.to_csv('/media/flira/77dd272b-2085-4be2-a3cf-eba95408fcfb/EmerSys_2018/PREDIPATH_genomes_12Marzo2018/Erwinia_06_jul_2018/Erwinia_20180706/genomic.gbff.out_tab', sep='\t',quoting=csv.QUOTE_NONE )

#print (df)
#print len(set_clusters)




for l in list_clusters:
	print l 

	cluster = "c" + l.split('.c')[-1].replace('.gbk', '')

	cluster_fasta = cluster + '.fasta'

	for seq_record in SeqIO.parse(os.path.join(folder, l), 'genbank'):
		output_dna.write(">%s|%s\n%s\n" % (seq_record.id, cluster, seq_record.seq))
		print cluster_fasta
		#print seq_record.seq
				#print seq_record.id
		for seq_feature in seq_record.features:


			if seq_feature.type=="source":
				try:
					source = seq_feature.qualifiers['organism'][0]
					#print source
				except (KeyError, IndexError):
					source = 'NA'

				try: 
					strain = seq_feature.qualifiers['strain'][0].replace( ' ', '').replace('/', '')
				except (KeyError, IndexError):
					strain = 'NA'


			elif seq_feature.type=="CDS":

				try:
					product = seq_feature.qualifiers['product'][0]
				except (KeyError, IndexError):
					pass

				try:
					refseq = seq_feature.qualifiers['protein_id'][0]
				except (KeyError, IndexError):
					refseq = seq_feature.qualifiers['locus_tag'][0] # = pass

				try:
					translation = seq_feature.qualifiers['translation'][0]
					output_amino.write(">ID:%s|[%s]|%s|%s(%s)\n%s\n" % (refseq, product, len(str(translation)), seq_record.id, len(str(seq_record.seq)),  translation))
				except (KeyError, IndexError):
					pass

	
"""

