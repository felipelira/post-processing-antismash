#!/usr/bin/env python
"""
by Felipe Lira 2018
Extract information from results generated by 'run_antismash.py'

1 - Extract dna and protein sequences from clusters identified (cluster.aa.faa; cluster.nt.fna)

2 - Gerenate a consensus table with compiled data about clusters and genomes

usage: extract_clusters_antismash.py [input_directory] [output directory]

input_directory = folder containing outputs from antismash
output_directory = folder created to save the outputs of this script

"""
import csv
import os
import sys
import pandas as pd
from collections import Counter
from Bio import SeqIO
from collections import Counter

#TODO run_antismash
# using genbank files
#"run_antismash.py", "-c", "8", "--taxon", "bacteria", "--input-type", "nucl", "--clusterblast", "--full-hmmer", "--outputfolder", "GCF_000367605.1.gbff.antismash", "--disable-html", "--logfile", log


# folder = os.path.realpath('/media/flira/77dd272b-2085-4be2-a3cf-eba95408fcfb/EmerSys_2018/PREDIPATH_genomes_12Marzo2018/Erwinia_06_jul_2018/Erwinia_20180706/genomic.gbff/GCF_000026185.1.gbff.antismash') # directory containing .gbff files

# input directory with antismash results 
directory = sys.argv[1]

out_dir_fna = os.path.join('..', directory + '_fna')

out_dir_faa = os.path.join('..', directory + '_faa')

out_table = directory.strip().split('/')[-1] + ".clusters.tab"

# create folder to store results from antismash
try:
	os.mkdir(out_dir_fna)
except:
	pass


try:
	os.mkdir(out_dir_faa)
except:
	pass


# lists, dictionaries, sets
lst_rslt = []
dict_rslt = {}

dict_clusters = {}


# access directory containing antismash folders
if os.path.isdir(directory):
	os.chdir(directory)
	for f in os.listdir('.'):
		if os.path.isdir(f) and f.endswith('.antismash'):
			path = os.path.realpath(f)
			genome = '.'.join(f.strip().split('/')[-1].split('.')[0:2])
			dict_rslt[genome] = path
			lst_rslt.append(path)

for genome, value in sorted(dict_rslt.iteritems()):

	path = os.path.join(value)

	fasta_fna = open(os.path.join(out_dir_fna, (genome +'_cluster.fna')), 'w')

	fasta_faa = open(os.path.join(out_dir_faa, (genome +'_cluster.faa')), 'w')



	for f in os.listdir(path):

		cluster = "c" + f.split('.c')[-1].replace('.gbk', '')

		if os.path.isfile(os.path.join(path,f)) and 'geneclusters.txt' in f:
			inhandle = os.path.join(path,f)
			for line in open(inhandle, 'r'):
				cluster_name = line.strip().split('\t')[2]
				if genome not in dict_clusters:
					dict_clusters[genome] = [cluster_name]
				else:
					dict_clusters[genome].append(cluster_name)


		elif os.path.isfile(os.path.join(path,f)) and '.cluster' in f:
			inhandle = os.path.join(path,f)

			for seq_record in SeqIO.parse(inhandle, 'genbank'):

				for seq_feature in seq_record.features:

					if seq_feature.type=="cluster":

						try:

							cluster_type = seq_feature.qualifiers['product'][0]
							#print source
						except (KeyError, IndexError):

							source = 'NA'
						

						fasta_fna.write(">%s|%s|%s\n%s\n" % (seq_record.id, cluster, cluster_type,  seq_record.seq))

			for seq_feature in seq_record.features:

				if seq_feature.type=="source":

					try:
						source = seq_feature.qualifiers['organism'][0]
						#print source
					except (KeyError, IndexError):
						source = 'NA'
					try: 
						strain = seq_feature.qualifiers['strain'][0].replace( ' ', '').replace('/', '')
					except (KeyError, IndexError):
						strain = 'NA'

				elif seq_feature.type=="CDS":

					try:
						product = seq_feature.qualifiers['product'][0]
					except (KeyError, IndexError):
						pass
					try:
						refseq = seq_feature.qualifiers['protein_id'][0]
					except (KeyError, IndexError):
						refseq = seq_feature.qualifiers['locus_tag'][0] # = pass
					try:
						translation = seq_feature.qualifiers['translation'][0]
						fasta_faa.write(">ID:%s|[%s]|%s|%s(%s)\n%s\n" % (refseq, product, len(str(translation)), seq_record.id, len(str(seq_record.seq)),  translation))
					except (KeyError, IndexError):
						pass



df = pd.DataFrame({k:Counter(v) for k, v in dict_clusters.items()}).T.fillna(0).astype(int)

df.to_csv(os.path.join('..',out_table), sep='\t',quoting=csv.QUOTE_NONE )

#print df
