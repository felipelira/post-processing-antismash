#!/usr/bin/env python
"""
by Felipe Lira 2018
Extract information from results generated by 'run_antismash.py'

1 - Extract dna and protein sequences from clusters identified (cluster.aa.faa; cluster.nt.fna)

2 - Gerenate a consensus table with compiled data about clusters and genomes

usage: extract_clusters_antismash.py [input_directory] [output directory]

input_directory = folder containing outputs from antismash
output_directory = folder created to save the outputs of this script

"""
import csv
import os
import sys
import pandas as pd
from collections import Counter
from Bio import SeqIO
from collections import Counter

#TODO run_antismash
# using genbank files
#"run_antismash.py", "-c", "8", "--taxon", "bacteria", "--input-type", "nucl", "--clusterblast", "--full-hmmer", "--outputfolder", "GCF_000367605.1.gbff.antismash", "--disable-html", "--logfile", log


# folder = os.path.realpath('/media/flira/77dd272b-2085-4be2-a3cf-eba95408fcfb/EmerSys_2018/PREDIPATH_genomes_12Marzo2018/Erwinia_06_jul_2018/Erwinia_20180706/genomic.gbff/GCF_000026185.1.gbff.antismash') # directory containing .gbff files

# input directory with antismash results 
directory = sys.argv[1]

out_dir_fna = os.path.join( '..', directory + '_fna')

out_dir_faa = os.path.join( '..', directory + '_faa')

out_table = directory.strip().split('/')[-1] + ".clusters.tab"

#os.chdir(directory)

# create folder to store results from antismash
try:
	os.mkdir(out_dir_fna)
except:
	pass


try:
	os.mkdir(out_dir_faa)
except:
	pass


# lists, dictionaries, sets
lst_rslt = []
dict_results = {}

dict_clusters = {}


# access directory containing antismash folders
if os.path.isdir(directory):

	os.chdir(directory)

	for f in os.listdir('.'):
		# identify folders generated by antismash
		if os.path.isdir(f) and f.endswith('.antismash'):
			# accession number
			genome = '.'.join(f.strip().split('/')[-1].split('.')[0:2])

			dict_results[genome] = os.path.realpath(f)


for genome, realpath in sorted( dict_results.iteritems() ):

	path = os.path.join(realpath) # path to the folder with results from antismash
	# outputs
	fasta_nucl = os.path.join( out_dir_fna, (genome +'_cluster.fna'))
	#fasta_prot = os.path.join( out_dir_faa, (genome +'_cluster.faa'))
	fasta_fna = open( fasta_nucl, 'w')
	#fasta_faa = open( fasta_prot, 'w')

# SAVE DNA SEQUENCES OF CLUSTERS EXTRACTED FROM .GBK FILES GENERATED BY ANTISMASH
	for gbk in os.listdir(path):

		if os.path.isfile(os.path.join(path,gbk)) and '.cluster' in gbk:

			inhandle = os.path.join(path,gbk)
			#print inhandle
			for seq_record in SeqIO.parse(open(inhandle, 'r'), 'genbank'):

				list_description_fna = []

				#print "Dealing with GenBank record %s" % seq_record.id
				for seq_feature in seq_record.features:

					if seq_feature.type=="cluster":

						try:
							cluster_type = seq_feature.qualifiers['product'][0]
							list_description_fna.append(cluster_type)
							if 'Cluster number:' in seq_feature.qualifiers['note'][0]:
								cluster_number = 'cluster_' + seq_feature.qualifiers['note'][0].split(':')[1].strip()
								list_description_fna.append(cluster_number)
						except (KeyError, IndexError):
							cluster_type = 'NA'
							list_description_fna.append(cluster_type)

				fasta_fna.write(">%s|%s|%s|%s\n%s\n" % (seq_record.id, '|'.join(list_description_fna), str(len(seq_record.seq)) + 'bp', seq_record.description, seq_record.seq) )

fasta_fna.close()

# Save protein sequences
for genome, realpath in sorted( dict_results.iteritems() ):

	path = os.path.join(realpath) # path to the folder with results from antismash

	fasta_prot = os.path.join( out_dir_faa, (genome +'_cluster.faa'))
	fasta_faa = open( fasta_prot, 'w')

	list_files = []

	for gbk in os.listdir(path):

		list_description_faa = []

		if os.path.isfile(os.path.join(path,gbk)) and '.cluster' in gbk:

			cluster = gbk.split('.')[-2]
			accession = '.'.join(path.split('/')[-1].split('.')[0:2])

			list_files.append(os.path.join(path,gbk))
	#print sorted(list_files)
	#for f in list_files:
			inhandle = os.path.join(path,gbk)

			for seq_record in SeqIO.parse(open(inhandle, 'r'), 'genbank'):

				for seq_feature in seq_record.features:

					if seq_feature.type=="CDS":

						try:
							refseq = seq_feature.qualifiers['protein_id'][0]
							list_description_faa.append(refseq)
						except (KeyError, IndexError):
							refseq = seq_feature.qualifiers['locus_tag'][0]
							list_description_faa.append(refseq)

						try:
							product = seq_feature.qualifiers['product'][0]
							list_description_faa.append(product)
						except (KeyError, IndexError):
							pass

						try:
							translation = seq_feature.qualifiers['translation'][0]

						except (KeyError, IndexError):
							pass


						fasta_faa.write(">ID:%s|%s|%s|%s\n%s\n" % (refseq, accession, cluster, product, translation))
fasta_faa.close()



for genome, realpath in sorted( dict_results.iteritems() ):

	path = os.path.join(realpath) # path to the folder with results from antismash

	for f in os.listdir(path):

		cluster = "c" + f.split('.c')[-1].replace('.gbk', '')


		if os.path.isfile(os.path.join(path,f)) and 'geneclusters.txt' in f:

			inhandle = os.path.join(path,f)

			for line in open(inhandle, 'r'):
				cluster_name = line.strip().split('\t')[2]

				if genome not in dict_clusters:
					dict_clusters[genome] = [cluster_name]

				else:
					dict_clusters[genome].append(cluster_name)

df = pd.DataFrame({k:Counter(v) for k, v in dict_clusters.items()}).T.fillna(0).astype(int)
df.to_csv(os.path.join('..',out_table), sep='\t',quoting=csv.QUOTE_NONE )

print df
